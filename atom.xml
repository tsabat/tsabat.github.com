<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Boom]]></title>
  <link href="http://tsabat.github.io/atom.xml" rel="self"/>
  <link href="http://tsabat.github.io/"/>
  <updated>2013-07-01T09:55:25-05:00</updated>
  <id>http://tsabat.github.io/</id>
  <author>
    <name><![CDATA[Timothy Sabat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Painless AWS Autoscaling With EBS Snapshots And Capistrano part 3]]></title>
    <link href="http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3/"/>
    <updated>2013-06-29T09:47:00-05:00</updated>
    <id>http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3</id>
    <content type="html"><![CDATA[<div style="width: 250px; float: right; margin: 0 0 10px 10px; padding: 20px; border: 1px solid #ccc;">
  <h4>A Three Part Series:</h4>
  <ul>
    <li><a href="http://boomboomboom.biz/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/">Part 1</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2/">Part 2</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3/">Part 3</a></li>
  </ul>
</div>


<p>This is part three of a series designed to get your auto scaling environment running.</p>

<h2>Review</h2>

<p>In the last part of this series, we reviewed a bunch of scripts used to deal with properly snapshotting and mounting volumes. In this part we&rsquo;ll get our auto scaling system set up in AWS. Then we&rsquo;ll give a high-level run-through of what you need to do to complete your setup. In this part we&rsquo;ll review these scripts:</p>

<h2>The Scripts</h2>

<ol>
<li><code>aws_create_lb.sh</code> &ndash; a bash script for creating an load balancer.</li>
<li><code>aws_create_launch_config.sh</code> &ndash; a bash script for creating launch configs.</li>
<li><code>aws_create_autoscaling_group.sh</code> &ndash; a bash script for creating an autoscaling group.</li>
<li><code>aws_create_scaling_policies.sh</code> &ndash; a bash script for creating policies and alarms.</li>
</ol>


<p>Finally, I&rsquo;ll tie together the whole process, referring to scripts as I go.</p>

<h2>Before you start</h2>

<p>The scripts that we&rsquo;re about to execute will work out of the box, but will have some very codepen-specific stuff listed in them. You&rsquo;ll probably want to do your own naming of policies, lbs, etc.</p>

<p>Also, I&rsquo;m not going to go into great detail about the AWS creation scripts. The most useful article I found on the topic is on the <a href="http://www.cardinalpath.com/autoscaling-your-website-with-amazon-web-services-part-2/">cardinal path</a> blog.  I followed his instructions until I understood the process well enough to build my own.</p>

<h2>AWS Autoscaling Creation Scripts</h2>

<p>I wrote bash scripts to automate the creation of my autoscaling setup. Let&rsquo;s review each in turn below.</p>

<p><a href="https://gist.github.com/tsabat/5891540">aws_create_lb.sh</a> &ndash; It is pretty obvious what&rsquo;s happening in this script.  Be sure to change the <code>CERT_ID</code> variable and the <code>LB_NAME</code> to something that makes sense for you.</p>

<p><a href="https://gist.github.com/tsabat/5891427">aws_create_launch_config.sh</a> &ndash; Here we&rsquo;re building our launch config.  Be aware that the <code>USER_DATA_FILE</code> here is the one we created in <a href="http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2">part 2</a> of this walkthrough.  Find the source <a href="https://gist.github.com/tsabat/5891084">here</a>.</p>

<p><a href="https://gist.github.com/tsabat/5891536">aws_create_autoscaling_group</a> &ndash; Again, boilerplate stuff.</p>

<p><a href="https://gist.github.com/tsabat/5891535">aws_create_scaling_policies.sh</a> &ndash; Note that I&rsquo;m creating four things in this script:  two policies and two metric alarms.  To keep things DRY, I wrote a function and overrode the global variables twice, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;scale up policy&quot;</span>
</span><span class='line'><span class="nv">POLICY_NAME</span><span class="o">=</span><span class="s2">&quot;scale-up&quot;</span>
</span><span class='line'><span class="nv">ADJUSTMENT</span><span class="o">=</span>1
</span><span class='line'><span class="nv">SCALE_UP</span><span class="o">=</span><span class="k">$(</span>add_policy<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;scale down policy&quot;</span>
</span><span class='line'><span class="nv">POLICY_NAME</span><span class="o">=</span><span class="s2">&quot;scale-down&quot;</span>
</span><span class='line'><span class="nv">ADJUSTMENT</span><span class="o">=</span><span class="s2">&quot;-1&quot;</span>
</span><span class='line'><span class="nv">SCALE_DOWN</span><span class="o">=</span><span class="k">$(</span>add_policy<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, <code>add_policy</code> is a function that we call twice.</p>

<h2>High Level Overview</h2>

<p>I&rsquo;ve thrown a lot of information at you all at once here and it&rsquo;s time to review the setup details from a high level.</p>

<ul>
<li>Create a new instance.  Install your webserver and get Capistrano pushing code.</li>
<li>Bootstrap your node with Chef, if you&rsquo;re using it</li>
<li>Create an AMI to work with</li>
<li>Launch a fresh AMI to work through your process</li>
<li>Manually set up your mount and volume for the first time, and snaphshot it, as described in <a href="http://tsabat.github.io/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano">part 1</a>.</li>
<li>Put <code>snapshot.py</code> and <code>prep_instance.py</code> onto your production AMI.</li>
<li>Add the <code>deploy:snapshot</code> task into your <code>deploy.rb</code>.</li>
<li>Put <code>utils.rb</code> into your <code>config</code> dir in your rails setup.</li>
<li>Add <code>production.rb</code> to your Capistrano multistage setup at <code>config/environments</code></li>
<li>Keep <code>chef_userdata.sh</code> and <code>userdata.sh</code> handy for when you work with <code>aws_create_launch_config.sh</code></li>
<li>Review the <code>autoscaling</code> recipe to see where all these files are stored on your production instance.</li>
</ul>


<h2>Conclusion</h2>

<p>Setting up an environment that scales based on load is cumbersome if you must constantly build AMIs every time your code changes.  But, as you&rsquo;ve seen, you don&rsquo;t have to bake an entire AMI to take advantage of autoscaling. The instructions listed in this series make Capistrano deployment a natural part of your autocaling process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless AWS Autoscaling With EBS Snapshots And Capistrano Part 2]]></title>
    <link href="http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2/"/>
    <updated>2013-06-29T05:12:00-05:00</updated>
    <id>http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2</id>
    <content type="html"><![CDATA[<div style="width: 250px; float: right; margin: 0 0 10px 10px; padding: 20px; border: 1px solid #ccc;">
  <h4>A Three Part Series:</h4>
  <ul>
    <li><a href="http://boomboomboom.biz/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/">Part 1</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2/">Part 2</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3/">Part 3</a></li>
  </ul>
</div>


<p>This is part two of a series designed to get your auto scaling environment running.</p>

<h2>Catching Up</h2>

<p>In the last part of this series, we did a bunch of manual key mashing to take our first snapshot. This gives us the foundation we need to automate the the process. In this part we will review the scripts required to make auto scaling work as expected.  Also, at the end of this post, I&rsquo;ll share the Chef recipe used to install all the scripts described here.</p>

<h2>The Scripts</h2>

<ol>
<li><code>snapshot.py</code> &ndash; a python script to snapshot a volume on deploy</li>
<li><code>deploy:snapshot</code> &ndash; a capistrano task used to call <code>snapshot.py</code></li>
<li><code>prep_instance.py</code> &ndash; a python script to mount a volume from the most recent snapshot and tag the instance.</li>
<li><code>utils.rb</code> &ndash; a ruby script used during <code>cap deploy</code> to get instance dns names by tags.</li>
<li><code>production.rb</code> &ndash; a the file used by capistrano multistage to get a list of servers.</li>
<li><code>chef_userdata.sh</code> &ndash; a userdata script for bootstrapping chef.</li>
<li><code>userdata.sh</code> &ndash; a userdata script that does not include chef bootstrapping.</li>
<li><code>autoscaling</code> &ndash; a chef recipe used to set up all the scripts above.</li>
</ol>


<h2>Before you start</h2>

<p>Let&rsquo;s review the tool set we&rsquo;ll be working with.  So far, we&rsquo;ve used Bash and the <a href="http://alestic.com/2012/09/aws-command-line-tools">AWS Command Line Tools</a> and we&rsquo;ve done just fine.  We&rsquo;ll still use bash to stitch together our scripts, but in the next few steps we&rsquo;ll be using both Python and Ruby to accomplish our goals. I find Python to be more expressive and capable than Bash when dealing with lots of variables that need to be type checked and have default values. Plus Ruby is a good fit for Capistrano. So, we&rsquo;ll be using the <a href="https://pypi.python.org/pypi/boto">boto</a> libraries on the server side, and the <a href="http://aws.amazon.com/sdkforruby/">AWS SDK for Ruby</a> on the client (Capistrano) side.</p>

<p>I use <a href="http://www.opscode.com/chef/">Chef</a> to manage my dependencies, but if you&rsquo;re doing this by hand, the AMI on which these scripts will run must have the boto libraries pre-installed.  To do so, you can issue the following statements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python-setuptools
</span><span class='line'>sudo easy_install pip
</span><span class='line'>sudo pip install boto
</span></code></pre></td></tr></table></div></figure>


<p>Also, boto expects on a <code>.boto</code> file to exist in the home directory for the user who executes these scripts.  We&rsquo;ll set the <code>BOTO_HOME</code> variable in our driver script later on in this post.</p>

<p>The rest of this part will describe the file you need and what they do.</p>

<h2>snapshot.py</h2>

<p><a href="https://gist.github.com/tsabat/5890733">source</a></p>

<p>The Python script we review here will:</p>

<ol>
<li>Given an instance ID, look up the volume attached to a device and take a snapshot of it.</li>
<li>Tag the snapshot, so that future scripts can query the tags.</li>
</ol>


<p>This script is called at deploy time so that the most recent code is always ready to mount on an auto scaling instance.</p>

<p>The <code>parsed_args</code> method at the top of the script does a decent job of describing its default values.  You&rsquo;ll probably want to change the <code>--tag</code> argument to match your organization&rsquo;s needs.</p>

<p>In the <code>main</code> method we do all our work. The line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">vols</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">get_all_volumes</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;attachment.instance-id&#39;</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">instance_id</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>drives this little app. We search for instance IDs that match that of the calling box.</p>

<p>Then we iterate over the volumes, searching for the mount point (device) we set up earlier. Once found, we tell the script to create the snapshot and add the tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">snap</span> <span class="o">=</span> <span class="n">code_volume</span><span class="o">.</span><span class="n">create_snapshot</span><span class="p">(</span><span class="n">snapshot_description</span><span class="p">(</span><span class="n">code_volume</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">instance_id</span><span class="p">))</span>
</span><span class='line'><span class="n">snap</span><span class="o">.</span><span class="n">add_tag</span><span class="p">(</span><span class="s">&#39;Name&#39;</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it.  We&rsquo;ll use this script later on in our automation.</p>

<h2>deploy:snapshot</h2>

<p>The Capistrano task below calls <code>snapshot.py</code> on deployment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">task</span> <span class="ss">:snapshot</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Take a snapshot of the codepen volume for future autoscaling needs&quot;</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;BOTO_CONFIG=/home/deploy/.boto /home/deploy/snapshot.py&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the presence of the <code>BOTO_CONFIG</code> environment variable.  The boto library provides <a href="https://code.google.com/p/boto/wiki/BotoConfig">documentation</a> for the appropriate keys to add to this INI-style file.</p>

<p>Finally, remember to add the snapshot task to your <code>after_deploy</code> hooks in your Capistrano <code>deploy.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="s2">&quot;deploy:snapshot&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>prep_instance.py</h2>

<p><a href="https://gist.github.com/tsabat/5890808">source</a></p>

<p>The script we&rsquo;ll review here will, given a tag, search for the most recent snapshot, create a volume and mount it.  Furthermore, the script will apply tags to the instance itself. We&rsquo;ll use these tags in our Capistrano ruby script.</p>

<p>As with the other Python script, there is a <code>parsed_args</code> method that defines the default values we&rsquo;ll need.  The <code>help</code> section of each describes each default.  The pair that need a bit more explaining are <code>device_key</code> and <code>device_value</code>.  If you recall in Step 4 of <a href="http://tsabat.github.io/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/">part one</a> of this series, device names can differ from AWS to your OS. These two arguments compensate for this fact.</p>

<p>Some interesting parts of the code include <code>wait_fstab</code> and <code>wait_volume</code>. Both deal with the fact that calls to create volumes, snapshots, and to attach devices are async. So, we must poll the API waiting for the status we expect. For example, in the snippet below, our script sleeps for up to 60 seconds until the status we want appears. If not, it throws an exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">wait_volume</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">volume</span><span class="p">,</span> <span class="n">expected_status</span><span class="p">):</span>
</span><span class='line'>    <span class="n">volume_status</span> <span class="o">=</span> <span class="s">&#39;waiting&#39;</span>
</span><span class='line'>    <span class="n">sleep_seconds</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">sleep_intervals</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">counter</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sleep_intervals</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;elapsed: </span><span class="si">%s</span><span class="s">. status: </span><span class="si">%s</span><span class="s">.&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">sleep_seconds</span> <span class="o">*</span> <span class="n">counter</span><span class="p">,</span> <span class="n">volume_status</span><span class="p">)</span>
</span><span class='line'>        <span class="n">conn</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">connect_to_region</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">region</span><span class="p">)</span>
</span><span class='line'>        <span class="n">volume_status</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">get_all_volumes</span><span class="p">(</span><span class="n">volume_ids</span><span class="o">=</span><span class="p">[</span><span class="n">volume</span><span class="o">.</span><span class="n">id</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">volume_status</span> <span class="o">==</span> <span class="n">expected_status</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">sleep_seconds</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">volume_status</span> <span class="o">!=</span> <span class="n">expected_status</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;Unable to get </span><span class="si">%s</span><span class="s"> status for volume </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">expected_status</span><span class="p">,</span> <span class="n">volume</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;volume now in </span><span class="si">%s</span><span class="s"> state&#39;</span> <span class="o">%</span> <span class="n">expected_status</span>
</span></code></pre></td></tr></table></div></figure>


<h2>utils.rb</h2>

<p><a href="https://gist.github.com/tsabat/5890996">source</a></p>

<p>This tool grabs all instance DNS names from AWS. We use this in the Capistrano multistage <code>production.rb</code> to get an array of DNS names. It is pretty self-explanatory. Since this script will be distributed to your developers, it would probably be a good idea to lock the credentials down to read-only. You will have to require this in your <code>deploy.rb</code> like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./config/deploy/utils&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the file itself. This makes deployment nice because it dynamically grabs EC2 Instances tagged with the Role and Environment you specify along with an <code>instance-state-name</code> of running. This guarantees that you&rsquo;re pushing out to all the servers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;awesome_print&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AwsUtil</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ec2_object</span>
</span><span class='line'>    <span class="c1"># deployer user, has read-only access</span>
</span><span class='line'>    <span class="ss">AWS</span><span class="p">:</span><span class="ss">:EC2</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="n">access_key_id</span><span class="p">:</span> <span class="s2">&quot;&lt;your_key_here&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">secret_access_key</span><span class="p">:</span> <span class="s2">&quot;&lt;your_secret_here&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">region</span><span class="p">:</span> <span class="s1">&#39;us-west-2&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deployed_app_server_dns_names</span>
</span><span class='line'>    <span class="n">ec2_object</span><span class="o">.</span><span class="n">instances</span><span class="o">.</span>
</span><span class='line'>      <span class="n">filter</span><span class="p">(</span><span class="s1">&#39;tag:Role&#39;</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">filter</span><span class="p">(</span><span class="s1">&#39;tag:Environment&#39;</span><span class="p">,</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">filter</span><span class="p">(</span><span class="s1">&#39;instance-state-name&#39;</span><span class="p">,</span> <span class="s1">&#39;running&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>      <span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">.</span><span class="n">dns_name</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_dns_names</span>
</span><span class='line'>    <span class="n">ap</span> <span class="n">deployed_app_server_dns_names</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>production.rb</h2>

<p><a href="https://gist.github.com/tsabat/5891043">source</a></p>

<p>The <a href="https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension">Capistrano multistage</a> extension allows you to specify a file for each deployment target. This script replaces <code>production.rb</code> and calls out to <code>utils.rb</code> to get dns names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s2">&quot;master&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># tagged:</span>
</span><span class='line'><span class="c1"># Role:app &amp;&amp; Environment:&#39;production&#39;</span>
</span><span class='line'><span class="c1"># filtered:</span>
</span><span class='line'><span class="c1"># instance-state-name:running</span>
</span><span class='line'><span class="n">aws_servers</span> <span class="o">=</span> <span class="no">AwsUtil</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">deployed_app_server_dns_names</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="p">{</span> <span class="n">aws_servers</span> <span class="p">}</span>
</span><span class='line'><span class="n">role</span> <span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="p">{</span> <span class="n">aws_servers</span> <span class="p">}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span> <span class="n">aws_servers</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>chef_userdata.sh</h2>

<p><a href="https://gist.github.com/tsabat/5891084">source</a></p>

<p>This file will be passed to an autoscale launch config.</p>

<p>The shebang line uses the <code>-ex</code> args to instruct bash to exit on error and to be very verbose when executing. This is super-handy for debugging your user data script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash -ex</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>exec</code> call redirects standard out and error to three different places.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">exec</span> &gt; &gt;<span class="o">(</span>tee /var/log/user-data.log|logger -t user-data -s 2&gt;/dev/console<span class="o">)</span> 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<p>We slightly shorten the DNS name and assign it to the <code>EC2_HOST</code> variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">EC2_HOSTNAME</span><span class="o">=</span><span class="sb">`</span>ec2metadata --public-hostname<span class="sb">`</span>
</span><span class='line'><span class="nv">EC2_HOST</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$EC2_HOSTNAME</span> | cut -d. -f1<span class="sb">`</span>
</span><span class='line'><span class="nv">EC2_HOST</span><span class="o">=</span><span class="nv">$EC2_HOST</span>.<span class="sb">`</span><span class="nb">echo</span> <span class="nv">$EC2_HOSTNAME</span> | cut -d. -f2<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not using Chef, you can skip the following bits. If you are using Chef you can boostrap the node this way: delete the <code>.pem</code>, set up a <code>first-boot.json</code> file, and pass the <code>EC2_HOST</code> variable to the <code>client.rb</code> file so your Chef node name is useful.</p>

<p>This script also assumes that the Chef libraries are already installed and have been bootstrapped once before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -a /etc/chef/client.pem <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>rm /etc/chef/client.pem
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;no pem to delete&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;{&quot;run_list&quot;:[&quot;role[app_server]&quot;,&quot;recipe[passenger]&quot;,&quot;recipe[autoscaling]&quot;]}&#39;</span> &gt; /etc/chef/first-boot.json
</span><span class='line'>sed -i <span class="s2">&quot;s/node_name \&quot;.*\&quot;/node_name \&quot;app_$EC2_HOST\&quot;/g&quot;</span> /etc/chef/client.rb
</span><span class='line'>sudo chef-client -j /etc/chef/first-boot.json
</span></code></pre></td></tr></table></div></figure>


<p>And finally we call <code>userdata.sh</code></p>

<h2>userdata.sh</h2>

<p><a href="https://gist.github.com/tsabat/5891225">source</a></p>

<p>Ultimately, this is the script that does all the work. It mounts drives as described in Step 4 of <a href="http://tsabat.github.io/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/">part one</a> and then calls <code>prep_instance.py</code> from above.</p>

<p>Although this script is mighty important, we&rsquo;ve covered all the details elsewhere. Look it over and you&rsquo;ll recognize parts.</p>

<h2>autoscaling chef recipe</h2>

<p><a href="https://github.com/tsabat/autoscaling">source</a></p>

<p>We&rsquo;ve reviewed a lot of scripts here in this document. You may be wondering where to put them all. Chef to the rescue!  Even if you&rsquo;re not using Chef, the <a href="https://github.com/tsabat/autoscaling/blob/master/recipes/default.rb">default recipe</a> from my recipe creates a great guide for placing these files where you want them.</p>

<p>Here&rsquo;s an example from the <code>default.rb</code>.  In this case <code>/root/.boto</code> is where we&rsquo;re going to place the <a href="https://github.com/tsabat/autoscaling/blob/master/templates/default/boto.cfg.read_only.erb">boto.cfg.read_only.erb</a> file.</p>

<p>The <code>owner</code>, <code>group</code> and <code>mode</code> functions should make sense to you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">template</span> <span class="s2">&quot;/root/.boto&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;boto.cfg.read_only.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0660&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This pattern is repeated throughout the document.</p>

<h2>Fin</h2>

<p>You&rsquo;ve reached the end of this part.  So far, you&rsquo;ve reviewed all the scripts you&rsquo;ll need to auto scale your environment.  In <a href="http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3">part 3</a> we&rsquo;ll look at some bash scripts for setting up your autoscaling rules, and review where all these scripts go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless AWS Auto Scaling With EBS Snapshots And Capistrano]]></title>
    <link href="http://tsabat.github.io/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/"/>
    <updated>2013-06-28T09:10:00-05:00</updated>
    <id>http://tsabat.github.io/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano</id>
    <content type="html"><![CDATA[<div style="width: 250px; float: right; margin: 0 0 10px 10px; padding: 20px; border: 1px solid #ccc;">
  <h4>A Three Part Series:</h4>
  <ul>
    <li><a href="http://boomboomboom.biz/blog/2013/06/28/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano/">Part 1</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2/">Part 2</a></li>
    <li><a href="http://boomboomboom.biz/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-3/">Part 3</a></li>
  </ul>
</div>


<h2>Choices to Make</h2>

<p><a href="http://aws.amazon.com/">AWS</a> (Amazon Web Services) auto scaling is a simple concept on the surface: You get an AMI, set up rules, and the load balancer takes care of the rest. However, actually getting it done is more complicated.</p>

<p>Some choices are worse than others: you could bake an AMI (Amazon Machine Image) before you deploy, but that could add 10 minutes or more to each deployment. Some are dangerous: you could create an AMI after each deploy, but you run the risk that an auto scale even happens before your AMIs are done. Plus, you have a whole variety of AMIs deployed in at any given time. Some are similar to what we propose in this tutorial: you could push your code to S3 on each deploy and have user-data scripts that pull it down on each auto scaling event.  However you slice it, to get auto scaling to fit into your development work flow in a transparent way takes careful thought and planning.</p>

<p>We recently rolled out the following solution at <a href="http://codepen.io/">CodePen</a>. It keeps our AMIs static and our application ready for scaling on EBS (Elastic Block Store) snapshots. We can push code using <a href="https://github.com/capistrano/capistrano">Capistrano</a> and let a few scripts distribute the ever-changing code base to our fleet of servers. I&rsquo;d like to share the steps required to make it work.  This series of posts will walk you through the steps required to build an auto-scaling infrastructure that stays out of your way.</p>

<h2>Overview</h2>

<p>The process can be summed up like this:</p>

<ul>
<li>Source is mounted on an EBS Volume.</li>
<li>Snapshots are taken on deployment.</li>
<li>When AWS scales up, new instances are started from latest snapshot.</li>
<li>Instances are tagged with roles so that deployment scripts always push code to the right servers.</li>
</ul>


<h2>Before you start</h2>

<p>This walk through assumes that you have a working Capistrano deployment going on AWS. If you need some help with that, the guys at <a href="http://beanstalkapp.com/">Beanstalk</a> have a <a href="http://guides.beanstalkapp.com/deployments/deploy-with-capistrano.html">great guide</a> for getting started.  We use the Capistrano <a href="https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension">Multistage</a> to separate our our deployment environments.</p>

<p>Also, it is a good idea to practice this whole setup on a clone of your application environment. Hopefully you&rsquo;re running your instance on an EBS-mounted root partition so you can simply create an AMI and run these steps in a safe environment.</p>

<p>A functional AWS API Tools environment is a requirement as well, because this walkthrough will use them extensively. Although I do my development on a Mac, I prefer a Linux environment for this type of work. I keep an EBS-backed micro instance around for all my admin work. I found Eric Hammond&rsquo;s instructions for <a href="http://alestic.com/2012/09/aws-command-line-tools">installing aws command line tools</a> invaluable for this task.</p>

<h2>Identifying Your Environments</h2>

<p>You&rsquo;ll be working in two environments for this tutorial.</p>

<ol>
<li>Workstation Environment &ndash; this is where you have the AWS API Tools installed. A micro instance is nice for this.</li>
<li>Instance Environment &ndash; this is the instance where you deploy your code.  To follow along with this guide, the Instance Environment should have a working Rails environment in the Source directory.  In this case, that&rsquo;s <code>/home/deploy/codepen</code>. Yours will obviously be elsewhere.</li>
</ol>


<p>I&rsquo;ll reference these two environments throughout this walk through.</p>

<h2>Step 1: Create the EBS volume in AWS &ndash; Workstation Environment</h2>

<p>In this section, we&rsquo;ll do the EBS legwork to get your code snapshot-ready.</p>

<p>First, let&rsquo;s identify where your source lives.  Capistrano&rsquo;s <code>deploy.rb</code> defines your Source directory with the <code>:deploy_to</code> setting.  We&rsquo;ll refer to this as your Source from here on out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Source</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/deploy/codepen&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will mount your source directory on an EBS volume in a process similar to the instructions laid out in the Amazon article <a href="http://aws.amazon.com/articles/1663">Running MySQL on Amazon EC2 with EBS</a>. This is a manual process for now, but we&rsquo;ll automate this with a script later on in the article.</p>

<p>Let&rsquo;s create a volume using the command line tools.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">VOL_ID</span><span class="o">=</span><span class="sb">`</span>ec2-create-volume --size 5 --availability-zone us-west-2c | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$VOL_ID</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s poll for your volume status. Repeat the command below until your echo returns <code>available</code>. It is worth noting that AWS calls are asynchronous. This means that even though you asked AWS to create the volume, you can&rsquo;t use it until its <code>Status</code> becomes <code>available</code>. That&rsquo;s what we&rsquo;re doing here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">STATUS</span><span class="o">=</span><span class="sb">`</span>ec2-describe-volumes <span class="nv">$VOL_ID</span> | awk <span class="s1">&#39;{print $4}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$VOL_ID</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 2: Get the Instance ID &ndash; Instance Environment</h2>

<p>You also need your Instance ID in order to mount this volume, so let&rsquo;s get that. You will need to be logged into the machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">INSTANCE_ID</span><span class="o">=</span><span class="sb">`</span>ec2metadata --instance-id<span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$INSTANCE_ID</span>
</span></code></pre></td></tr></table></div></figure>


<p>I take for granted here that the <code>ec2metadata</code> command is available on Ubuntu Cloud Instances. If you&rsquo;re using some other flavor of OS, you can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">INSTANCE_ID</span><span class="o">=</span><span class="sb">`</span>curl http://169.254.169.254/latest/meta-data/instance-id<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember your <code>$INSTANCE_ID</code>for the next section.</p>

<h2>Step 3: Mount the Volume &ndash; Workstation Environment</h2>

<p>In the previous section you got your instance ID. Let&rsquo;s put that in a variable on the workstation so you can easily access it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$INSTANCE_ID</span><span class="o">=</span>&lt;your instance id here&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s ask AWS to mount this volume to your instance on device <code>/dev/sdf</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ec2-attach-volume <span class="nv">$VOL_ID</span> -i <span class="nv">$INSTANCE_ID</span> -d /dev/sdf
</span></code></pre></td></tr></table></div></figure>


<h2>Step 4: Mount the File Systems to the Volume &ndash; Instance Environment</h2>

<p>In the previous steps, we attached a volume to an instance. Now we&rsquo;re on the instance and we&rsquo;ll associate that volume with the file system.</p>

<p>First, verify that the device exists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that the device I asked AWS to mount, <code>/dev/sdf</code>, is not the same as the device we&rsquo;re checking for.  Ubuntu uses the prefix <code>xvd</code> instead of <code>sd</code> to enumerate devices.  So, we search for <code>/dev/xvdf</code> to see that the <code>ec2-attach-volume</code> call worked.</p>

<p>It can take some time for the device to mount.  During that time, the command above could return <code>No such file or directory</code>. Just keep trying.</p>

<p>Now create an xfs filesystem on the device.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install -y xfsprogs
</span><span class='line'>
</span><span class='line'>grep -q xfs /proc/filesystems <span class="o">||</span> sudo modprobe xfs
</span><span class='line'>sudo mkfs.xfs /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>In the call above, we asked apt to install the <code>xfsprogs</code> package, we test that xfs was installed.  Then we make the filesystem with the <code>mkfs.xfs</code> command.</p>

<p>We&rsquo;ll create a temp at <code>/tmp/mount.sh</code> that you can <a href="https://gist.github.com/tsabat/5887028#file-mount-sh">grab from here</a></p>

<p>Let&rsquo;s review what it does.  Lines 1 &ndash; 6 below echo our mounting instructions into fstab. We want to mount our device <code>/dev/xvdf</code> to the file system at <code>/cp</code>.  Furthermore we want to mount the directory <code>/home/deploy/codpen/</code> to <code>/cp/codepen/</code>. The second mount just acts like a symlink, pointing the home directory of the deploy user to the mounted filesystem. The juicy bits are below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep <span class="s2">&quot;codepen_fstab_setup&quot;</span> /etc/fstab
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 1 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;# codepen_fstab_setup&quot;</span> | tee -a /etc/fstab
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;/dev/xvdf /cp xfs noatime 0 0&quot;</span> | tee -a /etc/fstab
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;/cp/codepen /home/deploy/codepen     none bind&quot;</span> | tee -a /etc/fstab
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, lines 1 &ndash; 12 below make the directories if they don&rsquo;t exist, and finally line 18 calls <code>mount -a</code>.  This tells the OS to run the <code>mount</code> command against <code>/etc/fstab</code>, effectively running the configuration we just set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> ! -d /cp <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>mkdir -m 000 /cp
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k"> </span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> ! -d /home/deploy/codepen <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>mkdir -m 000 -p /home/deploy/codepen
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span>mount -a
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo </span>FAIL
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have mounted <code>/dev/xvdf</code> and downloaded and executed <code>mount.sh</code> then you can verify that your devices and directories are mounted and linked by issuing the <code>mount</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount
</span><span class='line'>
</span><span class='line'>...snip
</span><span class='line'>/dev/xvdf on /cp <span class="nb">type </span>xfs <span class="o">(</span>rw,noatime<span class="o">)</span>
</span><span class='line'>/cp/codepen on /home/deploy/codepen <span class="nb">type </span>none <span class="o">(</span>rw,bind<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you have your source directory hosted on an EBS volume.</p>

<h2>Step 5: Verify, Deploy and Snapshot &ndash; Workstation Environment</h2>

<p>Now your code is ready for deployment. Let&rsquo;s verify that everything is in place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy:check
</span></code></pre></td></tr></table></div></figure>


<p>A hangup here could be permissions. If your code was already deployed to the Source directory, the above steps should have simply linked your code in Source to the <code>/cp/codepen</code> directory.  If for some reason this did not happen, you can initialize your deployment now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy:setup
</span><span class='line'>cap deploy
</span></code></pre></td></tr></table></div></figure>


<p>With a successful deployment, you&rsquo;re ready to snapshot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">SNAPSHOT_ID</span><span class="o">=</span><span class="sb">`</span>ec2-create-snapshot -d <span class="s2">&quot;First snapshot&quot;</span> <span class="nv">$VOL_ID</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re also going to tag the snapshot.  This step is important becasue during the launch of a new box, we&rsquo;ll search for the latest snapshot with this tag name and mount it as our Source directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ec2-create-tag <span class="nv">$SNAPSHOT_ID</span> --tag <span class="nv">Name</span><span class="o">=</span><span class="s2">&quot;codepen-app&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Done, for now.</h2>

<p>In <a href="http://tsabat.github.io/blog/2013/06/29/painless-aws-autoscaling-with-ebs-snapshots-and-capistrano-part-2">part 2</a> of this series, we&rsquo;ll automate what we did here with a script.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a RapidSSL SSL cert on an AWS Load Balancer]]></title>
    <link href="http://tsabat.github.io/blog/2013/05/07/installing-a-rapidssl-ssl-cert-on-an-aws-load-balancer/"/>
    <updated>2013-05-07T20:25:00-05:00</updated>
    <id>http://tsabat.github.io/blog/2013/05/07/installing-a-rapidssl-ssl-cert-on-an-aws-load-balancer</id>
    <content type="html"><![CDATA[<p>Over at <a href="http://codepen.io">CodePen</a> it came time to renew our SSL cert.  I dutifully follwed the <a href="https://knowledge.rapidssl.com/support/ssl-certificate-support/index?page=content&amp;id=SO21322&amp;actp=search&amp;viewlocale=en_US">setup instructions</a>, but I was greeted with this error:</p>

<blockquote><p>Invalid Public Key Certificate</p></blockquote>

<p>After talking with the support staff at RapidSSL, I was told to reverse the Intermediate CA Bundle.  The example from <a href="https://knowledge.rapidssl.com/support/ssl-certificate-support/index?page=content&amp;id=SO21856&amp;actp=search&amp;viewlocale=en_US&amp;searchid=1367983787858">their instructions</a> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-----BEGIN CERTIFICATE----
</span><span class='line'>Primary Intermediate CA
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>Secondary Intermediate CA
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>
</span><span class='line'>Needs to be switched to..
</span><span class='line'>
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>Secondary Intermediate CA
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>Primary Intermediate CA
</span><span class='line'>-----END CERTIFICATE-----
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m noting this here so in 2016 when we have to renew our SSL Cert, we&rsquo;ll know what to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Up A Static Host-Only Network For Virtualbox]]></title>
    <link href="http://tsabat.github.io/blog/2012/02/28/set-up-a-static-host-only-network-for-virtualbox/"/>
    <updated>2012-02-28T09:09:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2012/02/28/set-up-a-static-host-only-network-for-virtualbox</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>Setting up a Host-Only Network with Ubuntu Server requires some knowledge of networking.  But why accumulate knowledge when you can simply copy snippets from the internet?</p>

<h2>Set Up Host-Only Networking</h2>

<p>Host-Only Networking is a setting in VirtualBox that allows your host machine to act like a DHCP server for a private network on your machine.  Using this setting, you may loom like a god above the private network you create on your garden of nodes.  Or, you can just test out some new service&hellip; Your choice.</p>

<h3>Enable Host-Only Networking</h3>

<p>Right-click <code>settings</code> on your virtual machine of choice, then click the <code>Network</code> tab.  Choose <code>Adapter 2</code> and then click <code>Enable Network Adapter</code>.  Make sure the <code>Name</code> dropdown says <code>vboxnet1</code>.  If it does not, click <code>VirtualBox</code> from your menu bar, then <code>Preferences</code>, and then the <code>Network</code> tab because we&rsquo;re going to add a new network.  Click the <code>Add host-only network</code> button.  This will create a new Host-Only network with a gateway of <code>33.33.33.1</code>.  We&rsquo;ll set our Ubuntu Server up accordingly.</p>

<h3>Configure Your Ubuntu Box</h3>

<p>Start the box, then issue the following commands:</p>

<pre><code>sudo vi /etc/network/interfaces
</code></pre>

<p>Then, make your interfaces file look like this:</p>

<pre><code># The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp

auto eth1
iface eth1 inet static
    address 33.33.33.11
    netmask 255.255.255.0
    gateway 33.33.33.1
</code></pre>

<p>Then, reboot your machine.</p>

<pre><code>sudo reboot
</code></pre>

<h3>Verify Your Settings</h3>

<p>We want to make sure that the settings you put in place work.  To do so, issue this command</p>

<pre><code>ifconfig
</code></pre>

<p>And view the resulting settings:</p>

<pre><code>eth0      Link encap:Ethernet  HWaddr 08:00:27:c8:d3:98  
      inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
        ...Truncated for brevity...

eth1      Link encap:Ethernet  HWaddr 08:00:27:0e:e2:c0  
       inet addr:33.33.33.11  Bcast:0.0.0.0  Mask:255.255.255.0
        ...Truncated for brevity...
</code></pre>

<p>If you don&rsquo;t see that, be sure that the Host Only Network you created in the steps above is in the 33.33.33.1 gateway range.</p>

<h3>Reading More</h3>

<p><a href="https://help.ubuntu.com/8.04/serverguide/C/network-configuration.html">Ubuntu Network Configuration</a>
<a href="http://bowerstudios.com/node/722">Accessing Ubuntu Server in a VirtualBox Virtual Machine</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to manage your dotfiles with git]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/28/how-to-manage-your-dotfiles-with-git/"/>
    <updated>2011-12-28T21:45:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/28/how-to-manage-your-dotfiles-with-git</id>
    <content type="html"><![CDATA[<h3>Update</h3>

<p>The blog post below is over-simplified.  You should follow the steps outlined by the <a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/">vimcast</a> guys.</p>

<h3>Objective</h3>

<p>Programs like vim, bash, and zsh all use <code>dotfiles</code> for configuration.  You want to back them up in case of disaster.  Here&rsquo;s how I handle that using a <code>.dotfiles</code> directory and symlinks.</p>

<h3>Where Do My <code>dotfiles</code> Live?</h3>

<p>By default vim, bash, zsh and other programs store <code>dotfiles</code> in your home directory. You can view the dotfiles in your home directory like so:</p>

<pre><code>cd
ls -al
</code></pre>

<h3>Vim As An Example</h3>

<p>In the following steps, you&rsquo;ll learn how to back up your Vim configuration to a directory named <code>.dotfiles</code>.</p>

<p>To get started, create your <code>.dotfiles</code> directory.</p>

<pre><code>cd
mkdir -p .dotfiles/vim
</code></pre>

<p>Note: The <code>-p</code> option tells bash to create the directory recursively, building the entire path if it does not exist.</p>

<p>Now, move your <code>.vim</code> and <code>.vimrc</code> files to your <code>.dotfiles</code> directory.</p>

<pre><code>mv .vimrc .vim .dotfiles/vim
</code></pre>

<p>Finally, <a href="http://www.tech-recipes.com/rx/172/create_a_symbolic_link_in_unix_solaris_linux/">symlink</a> the files and folders you just moved back to their original location.</p>

<pre><code>cd
ln -s .dotfiles/vim/.vimrc .vimrc
ln -s .dotfiles/vim/.vim .vim
</code></pre>

<h3>Back It Up</h3>

<p>Remember to use whatever source control system you like to back up your <code>.dotfiles</code> directory.  I prefer git.</p>

<pre><code>cd ~/.dotfiles
git init
git add .
git commit -a -m 'My first dotfile commit'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Recipe To Upgrade Virtualbox Additions]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/20/chef-recipe-to-upgrade-virtualbox-additions/"/>
    <updated>2011-12-20T23:01:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/20/chef-recipe-to-upgrade-virtualbox-additions</id>
    <content type="html"><![CDATA[<p>Every time the guys at VirtualBox update their software, you have to scramble to find resources to upgrade your virtualbox guest additions.  You also get the following annoying message.</p>

<pre><code>[default] The guest additions on this VM do not match the install version of
VirtualBox! This may cause things such as forwarded ports, shared
folders, and more to not work properly. If any of those things fail on
this machine, please update the guest additions and repackage the
box.
</code></pre>

<p>To prevent this from being a hassle, I created this chef recipe to help ease our suffering.</p>

<script src="https://gist.github.com/1505022.js?file=upgrade_guest_additions.rb"></script>


<p>You will probably have to restart your vagrant box for this to work.  I&rsquo;m not 100% sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command-Line Resources]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/19/command-line-resources/"/>
    <updated>2011-12-19T08:07:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/19/command-line-resources</id>
    <content type="html"><![CDATA[<h3>SSH Tips</h3>

<p>This excellent article entitled <a href="http://shebang.brandonmintern.com/tips-for-remote-unix-work-ssh-screen-and-vnc#">Tips for Remote Unix Work</a> covers some vital SSH goodness.  For example, copying your public ssh key</p>

<pre><code>ssh user@example.com 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>and piping commands via SSH without logging into the remote machine</p>

<pre><code>cd &amp;&amp; tar czv src | ssh example.com 'tar xz'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to test out a shared vagrant box]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/15/how-to-test-out-a-shared-vagrant-box/"/>
    <updated>2011-12-15T12:17:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/15/how-to-test-out-a-shared-vagrant-box</id>
    <content type="html"><![CDATA[<h3>Intro</h3>

<p>At some point, someone will offer to share a vagrant box with you.  These are the steps required to get that box working.</p>

<h3>Create a Working Folder</h3>

<p>We&rsquo;ll need a place to house the <code>.box</code> file and a way to start it up, so create the directory and use the vagrant gem&rsquo;s <code>init</code> call, which will make a <code>VagrantFile</code> for you.</p>

<pre><code>mkdir WorkingFolder
cd WorkingFolder
vagrant init
</code></pre>

<h3>Download the <code>.box</code> File</h3>

<p>Put the <code>.box</code> file into your Working Directory.  For this exercise, we&rsquo;ll call it sharedBox.box.</p>

<h3>Add The Box to Vagrant&rsquo;s Box Cache</h3>

<p>The command below will import your .box file.</p>

<pre><code>cd WorkingFolder
vagrant box add shared_box sharedBox.box
</code></pre>

<p>Importing a box file will copy it your <code>~/.vagrant.d/boxes</code> folder.  To prove this, run the <code>ls</code> command.</p>

<pre><code>ls ~/.vagrant.d/boxes
yourshell$ shared_box
</code></pre>

<p>Notice that the <code>shared_box</code> argument to the <code>box add</code> command produces a <code>shared_box</code> file in your <code>~/.vagrant.d/boxes</code> directory.  Now, when dealing with this box in vagrant, you&rsquo;ll refer to it as <code>shared_box</code>.  So, you can safely delete the sharedBox.box file from your Working Directory.</p>

<pre><code>rm sharedBox.box
</code></pre>

<h3>Edit the VagrantFile</h3>

<p>In order start the vagrant box, you&rsquo;ll need to reference it in your <code>VagrantFile</code>.  Using your editor, change</p>

<pre><code>config.vm.box = "base"
</code></pre>

<p>to</p>

<pre><code>config.vm.box = "shared_box"
</code></pre>

<p>Now when you tell vagrant to start, you&rsquo;ll be referring to the <code>shared_box</code>.</p>

<h3>All Done</h3>

<p>With these steps in place, you&rsquo;re ready to start vagrant with the <code>vagrant_up</code> command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up A Vagrant Development Environment]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/12/setting-up-a-vagrant-development-environment/"/>
    <updated>2011-12-12T13:59:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/12/setting-up-a-vagrant-development-environment</id>
    <content type="html"><![CDATA[<h3>Install the Vagrant gem</h3>

<p>You need vagrant installed for this process to work.  Vagrant depends on a version of ruby we&rsquo;ll set up using the <a href="http://beginrescueend.com/">Ruby Version Manager</a>, as shown below.  This can take a while, so be patient.  A quick note for mac developers: RVM installs Ruby from source.  In order to do so, you will need <a href="http://developer.apple.com/xcode/">Xcode</a> installed.  You can try using another gcc, but for one-stop goodness, install Xcode and move along.</p>

<pre><code>bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
rvm install 1.9.2
rvm use 1.9.2 --default
</code></pre>

<p>Next install vagrant</p>

<pre><code>gem install vagrant
</code></pre>

<h3>Create A Home Base</h3>

<p>It is likely you&rsquo;ll be creating several vagrant boxes (individual machines) as you move along, so it makes sense to keep them organized in one place.  Let&rsquo;s create that now.</p>

<pre><code>mkdir ~/boxes
</code></pre>

<p>The <code>boxes</code> name given above is just my convention.  You may name that folder anything you like. We&rsquo;ll refer to this as your boxes directory.</p>

<h3>Clone The Opscode Cookbooks</h3>

<p>Opscode has a set of <a href="https://github.com/opscode/cookbooks">cookbooks</a> you&rsquo;ll use when writing chef scripts.  You&rsquo;ll want to pull these down and keep them within reach.</p>

<pre><code>cd ~/boxes
git clone https://github.com/opscode/cookbooks.git
</code></pre>

<p>This will create a directory <code>cookbooks</code> in your base directory containing all of Opscode&rsquo;s great cookbooks.  I suggest deleting the <code>.git</code> folder at the base of this dir and checking your cookbooks into your own source control repo.  As you add write cookbooks of your own, you may save them there.</p>

<h3>Create A Project Directory</h3>

<p>A project directory represents one (or more) VMs associated by a VagrantFile.  You&rsquo;ll learn more about the VagrantFile later in this article.  For now, just know that the VagrantFile acts as the configuration for your Vagrant project.  In the snippet below, we&rsquo;ll create a project directory called ProjectDirectory.  Choose a name that properly describes the box you&rsquo;re building.  For example, <code>WebServer</code> would be a good Project Directory name.</p>

<pre><code>cd ~/boxes/
mkdir ProjectDirectory
cd ProjectDirectory
</code></pre>

<h3>Clone the Chef Repo</h3>

<p>The Chef Repo is the basic structure required by Chef.  Your cookbooks and other important files will be kept here. In the example below, we&rsquo;ll be turning your Project Directory into a Chef Repo.  That&rsquo;s why we add the <code>.</code> at the end of the git clone command.</p>

<pre><code>cd ~/boxes/ProjectDirectory
git clone https://github.com/opscode/chef-repo.git .
</code></pre>

<p>If you run a <code>ls -al</code> command, you&rsquo;ll notice the following directory structure in your Project Directory now:</p>

<pre><code>ls -al
total 32
drwxr-xr-x  13 timsabat  staff   442 Dec 13 12:36 .
drwxr-xr-x   7 timsabat  staff   238 Dec 13 12:36 ..
drwxr-xr-x  13 timsabat  staff   442 Dec 13 12:36 .git
-rw-r--r--   1 timsabat  staff    18 Dec 13 12:36 .gitignore
-rw-r--r--   1 timsabat  staff  3521 Dec 13 12:36 README.md
-rw-r--r--   1 timsabat  staff  2171 Dec 13 12:36 Rakefile
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 certificates
-rw-r--r--   1 timsabat  staff   156 Dec 13 12:36 chefignore
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 config
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 cookbooks
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 data_bags
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 environments
drwxr-xr-x   3 timsabat  staff   102 Dec 13 12:36 roles
</code></pre>

<p>Since we&rsquo;ll be creating our own git repository in this directory, let&rsquo;s delete the one provided by the previous clone command.</p>

<pre><code>cd ~/boxes/ProjectDirectory
sudo rm -r .git .gitignore
</code></pre>

<h3>Initialize your Vagrant environment</h3>

<p>Vagrant depends on a file called VagrantFile for configuration information.  The following command creates that file.</p>

<pre><code>vagrant init
</code></pre>

<p>The <code>ls</code> command will prove the <code>vagrant init</code> call did create your VagrantFile.</p>

<p>Now we&rsquo;ll create a <code>knife.rb</code> file to control how chef&rsquo;s <code>knife</code> command interacts with your project.</p>

<pre><code>cd ~/boxes/ProjectDirectory
mkdir .chef
touch .chef/knife.rb
</code></pre>

<p>What is <code>knife</code> you ask?  Opscode <a href="http://wiki.opscode.com/display/chef/Knife">describes</a> this way:</p>

<blockquote><p>[knife] is used by administrators to interact with the Chef Server API and the local Chef repository. It provides the capability to manipulate nodes, cookbooks, roles, databags, environments, etc., and can also be used to provision cloud resources and to bootstrap systems.</p></blockquote>

<p>The following values should be present in your <code>knife.rb</code> file.</p>

<pre><code>current_dir = File.dirname(__FILE__)
cache_options( :path =&gt; "#{ENV['HOME']}/.chef/checksums" )
cookbook_path            ["#{current_dir}/../cookbooks", "#{current_dir}/../site-cookbooks"]
</code></pre>

<p>The options you&rsquo;ve set here tell chef where to create new cookbooks, and how/where to cache your erb templates.</p>

<h3>Create your <code>vagrant_main</code> cookbook</h3>

<p>In order for vagrant to configure your virtual machine, you must tell it which Chef cookbook to run first.  For convention&rsquo;s sake, we&rsquo;ll call this cookbook <code>vagrant_main</code>. If you were using hosted Chef instead of chef-solo (Vagrant&rsquo;s default mode), the would represent the &lsquo;run list&rsquo;.  If you don&rsquo;t know what that means, no big deal, you don&rsquo;t have to understand hosted chef to run Vagrant.</p>

<p>We&rsquo;ll run the following knife command create your <code>vagrant_main</code> cookbook.</p>

<pre><code>cd ~/boxes/ProjectDirectory
knife cookbook create vagrant_main
</code></pre>

<p>Observe your handiwork :</p>

<pre><code>cd ~/boxes/ProjectDirectory/cookbooks/vagrant_main
ls -al
</code></pre>

<p>and you&rsquo;ll see output which looks like this:</p>

<pre><code>-rw-r--r--   1 timsabat  staff   88 Dec 14 08:56 README.md
drwxr-xr-x   2 timsabat  staff   68 Dec 14 08:56 attributes
drwxr-xr-x   2 timsabat  staff   68 Dec 14 08:56 definitions
drwxr-xr-x   3 timsabat  staff  102 Dec 14 08:56 files
drwxr-xr-x   2 timsabat  staff   68 Dec 14 08:56 libraries
-rw-r--r--   1 timsabat  staff  249 Dec 14 08:56 metadata.rb
drwxr-xr-x   2 timsabat  staff   68 Dec 14 08:56 providers
drwxr-xr-x   3 timsabat  staff  102 Dec 14 08:56 recipes
drwxr-xr-x   2 timsabat  staff   68 Dec 14 08:56 resources
drwxr-xr-x   3 timsabat  staff  102 Dec 14 08:56 templates
</code></pre>

<p>Each directory here has special meaning to Chef. You and read about what each means by checking out the <a href="http://wiki.opscode.com/display/chef/Cookbooks">Opscode cookbook documentation</a>.</p>

<p>Finally, we&rsquo;ll tell the VagrantFile to run Chef against the <code>vagrant_main</code> cookbook we just created.  To do so, open the VagrantFile and change the values</p>

<pre><code># config.vm.provision :chef_solo do |chef|
#   chef.cookbooks_path = "cookbooks"
#   chef.add_recipe "mysql"
#   chef.add_role "web"
#
#   # You may also specify custom JSON attributes:
#   chef.json = { :mysql_password =&gt; "foo" }
# end
</code></pre>

<p>to</p>

<pre><code>config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = ["cookbooks", "site-cookbooks"]
    chef.add_recipe "vagrant_main"
end
</code></pre>

<h3>Conclusion</h3>

<p>You&rsquo;ve set up a Vagrant Development Environment.  Now, write a recipe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Chef Client and Chef Server]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/11/installing-chef-client-and-chef-server/"/>
    <updated>2011-12-11T23:31:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/11/installing-chef-client-and-chef-server</id>
    <content type="html"><![CDATA[<h3>This guide will get you up and running with chef server and client on the same Windows 2008 Server.</h3>

<p>The instructions outlined herin are a distillaiton of the <a href="http://wiki.opscode.com/display/chef/Fast+Start+Guide+for+Windows#FastStartGuideforWindows-Step1%253ACreateaHostedChefaccount">Chef Fast-Start Guide For Windows</a></p>

<h3>Create a Hosted Chef Account</h3>

<p>The instructions for <a href="http://wiki.opscode.com/display/chef/Fast+Start+Guide+for+Windows#FastStartGuideforWindows-Step1%253ACreateaHostedChefaccount">Creating a Hosted Chef Account</a> are easy to follow.  Do that and return to this guide.</p>

<h3>Install Chef Client and Server</h3>

<p>Run the <a href="http://opscode-full-stack.s3.amazonaws.com/windows/chef-client-0.10.4-6.msi">Chef Full Installer</a> and then verify your install with these commands.</p>

<pre><code>chef-client --version
tar --version
</code></pre>

<p>should produce</p>

<pre><code>Chef: 0.10.4
bsdtar 2.8.3 0 libarchive 2.8.3
</code></pre>

<h3>Install Git</h3>

<p>Follow the instructions listed in the <a href="http://help.github.com/win-set-up-git/">github.com Windows Setup Guide</a>.</p>

<p>Then verify</p>

<pre><code>git --version
</code></pre>

<p>will produce</p>

<pre><code>git version 1.7.6.mmsygit.0
</code></pre>

<p>or whatever the latest git version happens to be.</p>

<h3>Prepare Your File System</h3>

<p>Follow these instructions to set up your base Chef directory.  You&rsquo;ll use this when creating cookbooks.</p>

<pre><code>cd %HOMEPATH%
git clone git://github.com/opscode/chef-repo.git
mkdir %HOMEPATH%\chef-repo\.chef
</code></pre>

<p>Move in your Chef keys you created in the first step of this guide titled Create A Hosted Account.  Edit the snippet below for your system settings:</p>

<pre><code>move %HOMEPATH%\Downloads\knife.rb %HOMEPATH%\chef-repo\.chef
move %HOMEPATH%\Downloads\tsabat.pem %HOMEPATH%\chef-repo\.chef
move %HOMEPATH%\Downloads\fizbuzz-validator.pem %HOMEPATH%\chef-repo\.chef
</code></pre>

<p>Open WordPad to edit your knife.rb file.</p>

<pre><code>Write %HOMEPATH%\chef-repo\.chef\knife.rb, 
</code></pre>

<p>MEPATH%\chef-repo
In that file, change <code>cookbook_path ["#{current_dir}/../cookbooks"]</code> to <code>cookbook_path ["#{ENV['HOME']}/chef-repo/cookbooks"]</code></p>

<h3>Verify Connection To Hosted Chef</h3>

<p>Run the commands</p>

<pre><code>cd %HOMEPATH%\chef-repo
knife client list fizbuzz-validator
</code></pre>

<p><strong>TODO: Explain the validator&rsquo;s role in Chef</strong></p>

<p>and you&rsquo;ll see your machine name listed there.</p>

<h3>Configure The Workstation as Client</h3>

<p>Run these commands</p>

<pre><code>cd %HOMEPATH%\chef-repo
knife configure client %HOMEPATH%\chef-repo
</code></pre>

<p>Then edit your client.rb</p>

<pre><code>Write %HOMEPATH%\chef-repo
</code></pre>

<p>making it look like this, substituting fizbuzz for your own organization.</p>

<pre><code>log_level        :info
log_location     STDOUT
chef_server_url  'https://api.opscode.com/organizations/fizbuzz'
validation_client_name 'fizbuzz-validator'
validation_key cd "#{ENV['HOME']}/chef-repo/.chef/fizbuzz-validator.pem"
client_key "#{ENV['home']}/chef-repo/client.pem 
</code></pre>

<p>Run chef-client to register your client with the server.</p>

<pre><code>chef-client -c %HOMEPATH%\chef-repo\client.rb
</code></pre>

<p>You&rsquo;ll see output which looks like this:</p>

<pre><code>[Mon, 12 Dec 2011 00:48:03 -0800] INFO: *** Chef 0.10.4 ***
[Mon, 12 Dec 2011 00:48:09 -0800] INFO: Client key C:\Users\Administrator/chef-r
epo/client.pem is not present - registering
[Mon, 12 Dec 2011 00:48:14 -0800] INFO: Run List is []
[Mon, 12 Dec 2011 00:48:14 -0800] INFO: Run List expands to []
[Mon, 12 Dec 2011 00:48:14 -0800] INFO: Starting Chef Run for WIN-JLR7H2GM3Q5
[Mon, 12 Dec 2011 00:48:14 -0800] INFO: Loading cookbooks []
[Mon, 12 Dec 2011 00:48:14 -0800] WARN: Node WIN-JLR7H2GM3Q5 has an empty run li
st.
[Mon, 12 Dec 2011 00:48:15 -0800] INFO: Chef Run complete in 1.484375 seconds
[Mon, 12 Dec 2011 00:48:15 -0800] INFO: Running report handlers
[Mon, 12 Dec 2011 00:48:15 -0800] INFO: Report handlers complete
</code></pre>

<p>Verify that your node was added</p>

<pre><code>cd %HOMEPATH%\chef-repo
knife client list
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Boxes and veewee]]></title>
    <link href="http://tsabat.github.io/blog/2011/12/08/vagrant-boxes-and-veewee/"/>
    <updated>2011-12-08T22:02:00-06:00</updated>
    <id>http://tsabat.github.io/blog/2011/12/08/vagrant-boxes-and-veewee</id>
    <content type="html"><![CDATA[<h3>11PM Thursday Night</h3>

<p>I&rsquo;ve been trying to get Windows 2008 <a href="vagrantup.com">vagrant</a> box up and running and I&rsquo;ve had little luck.  According to instructions on <a href="http://www.ducea.com/2011/08/15/building-vagrant-boxes-with-veewee/">ducea.com</a>, the creation of a base windows box sould be a breeze using the <a href="https://github.com/jedi4ever/veewee">veewee</a> gem, but the postinstall.sh script placed in the base of the cygwin install had several errors.</p>

<h3>10AM Friday Morning</h3>

<p>It looks like cygwin was sporting an older version.</p>

<p>TODO:</p>

<ol>
<li>Edit the <a href="https://github.com/jedi4ever/veewee/blob/master/templates/windows-2008R2-amd64/postinstall.sh">postinstall.sh</a> file to pull the latest cygwin files.</li>
<li>Also, the ruby installer looks like it wants to pull the 32 bit install.  Is that right?</li>
</ol>

]]></content>
  </entry>
  
</feed>
